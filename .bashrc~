# MAB

# User specific aliases and functions

# Source global definitions



if [ -f /etc/bashrc ] ; then
	. /etc/bashrc
fi

ulimit -s 4096
ulimit -c unlimited

[ -z "$PS1" ] && return

#if ! shopt login_shell >& /dev/null ; then
#    return
#fi

# colors
BOLD="\[\033[1m\]"
RED="\[\033[1;31m\]"
OFF="\[\033[m\]"
GREEN="\[\033[0;32m\]"
CYAN="\[\033[0;36m\]"
PURPLE="\[\033[0;35m\]"
RV="\e[7m"
 
function exitstatus {

	EXITSTATUS="$?"
	COLOR=${CYAN}
	LAST=" \$>"
	if [ "$EXITSTATUS" -eq "0" ] ; then
		PS1="${EXITSTATUS}:\!:${COLOR}\u@\h:\w${LAST} ${OFF}"
	else
		PS1="${RED}${EXITSTATUS}:\!:${COLOR}\u@\h:\w${OFF}${RED}${LAST} ${OFF}"
	fi

	PS2="${BOLD}>${OFF} "
}

function print {
    enscript 4 -E -G2r -u'mab' $1
}

function print1 {
    enscript 4 -E -G -u'mab' $1
}

function sfp {
    if [ -n "${1}" ] ; then
	echo -en "\\033[1m"
	echo "Setting SF_PREFIX to /var/tmp/BUILD-$1"
	echo -en "\\033[m"
	export SF_PREFIX=/var/tmp/BUILD-$1
    else
	echo -en "\\033[1m"
	echo "SF_PREFIX is set to ${SF_PREFIX}"
	echo -en "\\033[m"
    fi
}

function mount-ender {
    if ping -c 1 ender.sfeng.sourefire.com >& /dev/null ; then
	if ! mount | grep ender.sfeng >& /dev/null ; then
	    echo -n "Mounting ender on ~/src ... "
	    sshfs ender.sfeng.sourcefire.com:src ~/src -o uid=500,gid=500
	    echo " done"
	else
	    echo -n "Unmount ~/src ... "
	    fusermount -u ~/src
	    echo " done"
	fi
    fi

}

function connect-sf {
    local PID=$( pgrep openconnect )

    if [ -z "${PID}" ] ; then
	echo "Connecting to sourcefire vpn...."
	sudo openconnect -b -u mbrannig --authgroup=SF-STD -s /etc/vpnc/vpnc-script remote.sourcefire.com
    else
	if ask "Disconnect from Sourcefire VPN ($PID)" ; then
	    echo -n "Disconnecting sourcefire vpn..."
	    sudo kill ${PID}
	    sudo ifdown eth0
	    sudo ifup eth0
	    echo " done"
	fi
    fi

}

function ask()          # See 'killps' for example of use.
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function ff() 
{ 
    find . -type f -iname '*'$*'*' -ls ; 
}

function sf_cvs()
{
    export CVS_RSH=ssh
    export CVSROOT=":ext:cvs.sourcefire.com:/usr/cvsroot"
    export CDPATH='.:~/src:~/src/WORK'
}

function xtitle()      # Adds some text in the terminal frame.
{
    case "$TERM" in
        *term | rxvt)
            echo -n -e "\033]0;$*\007" ;;
        *)  
            ;;
    esac
}




function _branch_list()
{

#    local list=$(cd ~/src/WORK ; find ${BRANCH_REPOS} -maxdepth 1 -type d ! -name ".bzr" -printf "%f " )
 
    local tmp
    local list
    for i in ${BRANCH_REPOS} ; do
	tmp=$(cd ~/src/WORK/${i} ; find . -maxdepth 1 -type d ! -name ".bzr" -printf "%f\n" | grep -v "^\." | xargs )
	list="$list $tmp"
    done
    echo "${BRANCHES} ${list}"
}

function _branches() 
{
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=( $( compgen -W "$(_branch_list)" $cur ) )
    elif [ $COMP_CWORD -eq 2 ]; then
        case "$prev" in 
        help)
            COMPREPLY=( $( compgen -W "$(_branch_list) commands" $cur ) )
            ;;
        esac
    fi 
}

function _var_functions()
{
 echo "foo"   

}

function br()
{
    local dir=$1
    local top=~/src/WORK/
    for i in ${BRANCH_REPOS} ; do
	if [ -d "${top}/${i}/$1" ] ; then
	    cd ${top}/${i}/$1
	    return
	fi
    done
    if [ -d "${top}/$1" ] ; then
	cd ${top}/$1
	return
    fi
    echo "No branch directory for $1!"
}

function get_remote_mac()
{
    local HOST=$1

    arping -c 1 -q ${HOST} 2> /dev/null
    if [ $? -ne 0 ] ; then
	MAC=
	echo "unable to get mac for ${HOST}"
	return 1
    else
	MAC=$( arp ${HOST} | tail -1 | awk -F' ' '{print $3}' )
    fi

}

function localboot()
{
    local HOST=$1

    get_remote_mac ${HOST}

    local mac=$(echo "01-${MAC}" | sed -e 's/:/-/g' | tr [A-Z] [a-z] )

    rm -vf /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}
    cp -vf /nfs/netboot/sf-linux-os/install-configs/localboot.cfg /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}
    chmod -v 777 /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}

}

function pxe_mac()
{

    local HOST=$1

    get_remote_mac ${HOST}

    local mac=$(echo ${MAC} | sed -e 's/:/-/g' | tr [A-Z] [a-z] )

    echo "01-${mac}"
}

function copy_pxe_config()
{
    local HOST=$1
    local FILE=$2

    local mac=$(pxe_mac $HOST)
    
    rm -vf /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}

    cp -vf ${FILE} /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}

    chmod -v 777 /nfs/netboot/sf-linux-os/tftpboot/pxelinux.cfg/${mac}

}

function add_host()
{
    if ! grep ${1} ${HOST_LIST_FILE} >& /dev/null ; then
	echo "$1" >> ${HOST_LIST_FILE}
    fi
}


function reboot_wait()
{
    if [ -f ${REPO}/reboot-system.expect ] ; then
	${REPO}/reboot-system.expect $1 $2 $3
    fi
    local port=443
    if [ -n "$4" ] ; then
	port=$4
    fi

    wait_for_shutdown $1 
    wait_for_port $1 $port
    send_mail

}

function wait_host()
{
    wait_for_port $1 $port
    send_mail
}

function wait_for_port()
{
    local HOST=$1
    local PORT=$2
   local keep_going
    local output
    local banner
    keep_going=0

    while [ $keep_going -eq 0 ]  ; do
	output=$(nc -d -w 2 ${HOST} ${PORT})
	if [ $? -eq 0 ] ; then
	    if [ "${PORT}" = "22" ] ; then 
		if [[ ${output} =~ OpenSSH ]] ; then
		    keep_going=1
		    return 0
		fi
	    else
		keep_going=1
		return 0
	    fi
	fi
	sleep 5
    done
    
}

wait_for_shutdown()
{
    local HOST=$1
    local keep_going
    keep_going=0

    while [ $keep_going -eq 0 ]  ; do
	ping -c 1 ${HOST} >& /dev/null
	if [ $? -ne 0 ] ; then
	    keep_going=1
	    return 0
	fi
	sleep 5
    done
 

}

send_mail()
{
    echo | msmtp -C ${REPO}/msmtprc -f ${USER}@sfeng.sourcefire.com ${USER}@sourcefire.com <<EOF
Subject: Your install of ${HOST} is complete
To: ${USER}@sourcefire.com
From: install@sfeng.sourcefire.com

Your install of ${HOST} in complete.
EOF

}

function copy_tree()
{
    local src=$1
    local dst=$2

    local dir=$( dirname $1)
    
    mkdir -vp $dst/$dir

    cp -av $src $dst/$dir

}

EXTRAPTH=

HOST=$(hostname)
SHORTHOST=$(hostname -s)

export REPO=~/repo/mbrannig

if ! bash --version | grep 2.05 >& /dev/null ; then
    source ${REPO}/.bashrc-v3-only
fi
PLATFORM=$(uname )
ARCH=$(uname -m)

if host ${HOST} | grep sourcefire >& /dev/null ; then
    echo -n "Setting up Sourcefire Environment (${ARCH}): "
    export PYTHONPATH=/usr/local/lib/python:/usr/lib/python2.5
    export PRINTER=Copier
    export REPLYTO=matthew.brannigan@sourcefire.com
    EXTRAPATH=/usr/Python-2.6.4/bin
    export SF_PREFIX=${SF_PREFIX:=/var/tmp/BUILD}
    sf_cvs
    HOST_LIST=$(cat ${REPO}/hosts-sf.txt ${REPO}/hosts.txt | xargs)
    HOST_LIST_FILE=${REPO}/hosts-sf.txt
    echo "SF_PREFIX is set to ${SF_PREFIX}"
else
    echo "Setting up Den of Slack Environment (${ARCH}):"
    export PRINTER=officejet7310
    export REPLYTO=mbrannig@mbrannig.org
    HOST_LIST=$(cat ${REPO}/hosts-dos.txt ${REPO}/hosts.txt | xargs ; cat ${REPO}/hosts-sf.txt | sed -e 's/$/.sfeng/g')
    HOST_LIST_FILE=${REPO}/hosts-dos.txt
fi

if [ "${PLATFORM}" = "Linux" ] ; then
    COLOR_LS="--color"

elif [ "${PLATFORM}" = "Darwin" ] ; then
    COLOR_LS="-G"
fi

PROMPT_COMMAND=exitstatus
BRANCH_REPOS="IMS OS BUILD_SCRIPTS"
BRANCHES="MODEL-PACK"

export PATH=~/bin:/opt/local/bin:/opt/local/sbin:/usr/sbin:/sbin:/bin:/usr/bin:/usr/local/bin::/usr/bin/X11:${EXTRAPATH}
export EDITOR=vi
export VISUAL=vi
export PAGER=less
export LESS="-ern"
export LANGUAGE=C
export LC_ALL=C
export LANG=C

if [ "${USER}" = "mbrannig" ] ; then
    xtitle "${SHORTHOST}" 
else
    xtitle "${USER}@${SHORTHOST}" 
fi	


set -o emacs
set -o histexpand
set -o ignoreeof
set -o noclobber

shopt -s cdspell
shopt -s extglob
shopt -s cmdhist
shopt -s checkwinsize
shopt -s histappend

alias more=less

alias ls="ls ${COLOR_LS} -hCF"
alias ll="ls ${COLOR_LS} -l"
alias dir="ls ${COLOR_LS} -lF"

alias df="df -h"
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
alias xr="xrdb ${REPO}/emacs.defaults"
alias help="apropos"
alias reup="source ${REPO}/.bashrc"

## completes

complete -W '$(cd /var/tmp ; "ls" -d BUILD-* | sed -e "s/BUILD-//g" )' sfp
#complete -W '$(cd ~/src/WORK ; find IMS OS MODEL-PACK BUILD_SCRIPTS -maxdepth 1 -type d | xargs )' br
complete -F _branches br
complete -A hostname   ssh ping localboot
complete -W '${HOST_LIST}' ssh ping rsh localboot
complete -A export     printenv
complete -A variable   export local readonly 
complete -A enabled    builtin
complete -A alias      alias unalias
complete -A function   function 
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%'     fg jobs disown
complete -A directory  mkdir rmdir
complete -A directory   -o default cd

complete -F _vars_functions unset

# bzr
function _bzr_commands() 
{
     bzr help commands | sed -r 's/^([-[:alnum:]]*).*/\1/' | grep '^[[:alnum:]]' 
}

function _bzr() 
{
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=( $( compgen -W "$(_bzr_commands)" $cur ) )
    elif [ $COMP_CWORD -eq 2 ]; then
        case "$prev" in 
        help)
            COMPREPLY=( $( compgen -W "$(_bzr_commands) commands" $cur ) )
            ;;
        esac
    fi 
}

complete -F _bzr -o default bzr

